In this challenge, we are given an x86_64 ELF executable (boffin), and
we have a netcat connection to the challenge server, which runs the
executable.

When we run the program, it asks for our name, and prints our response.
This is essentially all the program does.

Disassembling the executable, we see that it uses the function gets,
to get user input, which is vulnerable to buffer overflow. Hence, we
might use this vulnerability to exploit the program. Recalling the
stack frame for x86_64: (Note: The stack grows downwards, to the lower
memory addresses.)

------------------------
      saved rip
------------------------
      saved rbp
------------------------


        stack


------------------------

We notice that we can fill up the stack with our input, and overwrite
saved base pointer (rbp) and saved instruction pointer (rip). This
might give full control, combining with another vulnerability.
However, for this challenge, we are already given a function 
(give_shell) which spawns a shell for us. Thus, we can simply call that 
function by overwriting the saved rip, whose address is 0x40069d as given 
by the disassembler. 

In addition, to be able to overwrite the saved rip, we should fill up 
the stack and the saved rbp by entering arbitrary data. Using the
disassembler, we find the stack height as 0x20, onto which we need to
append 0x8 to account for the saved rbp. So, in total we should
enter an input of length 0x28, before entering the address of give_shell.

Hence, to get the flag, we should enter the following exploit:

$ python -c "print 'B'*0x28 + '\x9d\x06\x40\x00\x00\x00\x00\x00'"; \
  cat | ./boffin

where we enter the address 0x40069d in Little Endian format, and cat to
make stdin/stdout stay alive. As a side note, one might use the Python
package pwntools to produce the above string automatically, with p64
function as follows:

$ python -c "from pwn import *; print 'B'*0x28 + p64(0x40069d)"; \
  cat | ./boffin

After this point, we have shell, so we can execute arbitrary commands. 

Note: This demonstrates the solution for the local machine. To get the 
flag from the challenge server, one should do similar steps from network 
using sockets. Since the website is only available to NYU students, it 
doesn't make sense to share the details of socket communications.
